// using GA_Binary_Endode;
using GA_Template;
// using RandomDataGenerate;
// MyProgram program = new MyProgram();
// // program.Run();
// program.randomData2(100);
Console.WriteLine("----- Main Program -----");

double[][] x = [[1, 61, 47], [2, 92, 95], [3, 21, 40], [4, 14, 12], [5, 41, 46], [6, 28, 100], [7, 99, 60], [8, 77, 6], [9, 65, 12], [10, 76, 90], [11, 83, 20], [12, 37, 67], [13, 5, 21], [14, 4, 4], [15, 74, 38], [16, 16, 77], [17, 96, 42], [18, 69, 34], [19, 38, 1], [20, 22, 80], [21, 21, 67], [22, 21, 86], [23, 53, 20], [24, 85, 33], [25, 52, 62], [26, 6, 69], [27, 10, 88], [28, 18, 40], [29, 4, 3], [30, 67, 36], [31, 67, 37], [32, 52, 78], [33, 70, 48], [34, 68, 5], [35, 78, 39], [36, 89, 15], [37, 3, 52], [38, 66, 85], [39, 28, 23], [40, 93, 70], [41, 50, 100], [42, 75, 9], [43, 99, 70], [44, 56, 25], [45, 95, 75], [46, 59, 57], [47, 52, 62], [48, 79, 58], [49, 36, 4], [50, 49, 46], [51, 52, 73], [52, 21, 1], [53, 44, 24], [54, 42, 97], [55, 12, 5], [56, 17, 61], [57, 14, 31], [58, 69, 74], [59, 60, 12], [60, 52, 24], [61, 50, 95], [62, 62, 89], [63, 61, 13], [64, 86, 81], [65, 76, 42], [66, 21, 5], [67, 51, 97], [68, 89, 48], [69, 97, 70], [70, 21, 64], [71, 11, 17], [72, 16, 80], [73, 5, 37], [74, 1, 56], [75, 30, 76], [76, 43, 32], [77, 87, 26], [78, 43, 76], [79, 18, 55], [80, 2, 85], [81, 24, 59], [82, 66, 92], [83, 74, 60], [84, 53, 91], [85, 23, 100], [86, 43, 13], [87, 55, 53], [88, 32, 13], [89, 77, 16], [90, 21, 76], [91, 22, 78], [92, 78, 64], [93, 87, 6], [94, 72, 92], [95, 44, 43], [96, 28, 11], [97, 39, 55], [98, 84, 16], [99, 38, 98], [100, 33, 87],];
double[] y = [10.33, 9.66, 9.05, 9.52, 7.07, 7.80, 10.74, 11.93, 9.29, 11.10, 9.50, 10.99, 10.99, 10.68, 10.99, 7.80, 8.68, 11.24, 18.06, 8.91, 9.74, 8.90, 7.32, 7.13, 9.54, 12.68, 9.28, 11.59, 10.03, 7.98, 8.56, 10.23, 12.27, 12.41, 7.86, 10.03, 7.38, 8.30, 9.04, 11.38, 11.77, 10.93, 9.25, 11.72, 12.31, 9.36, 9.80, 7.44, 9.79, 10.34, 10.34, 15.89, 12.40, 8.64, 11.69, 8.93, 10.71, 12.98, 8.73, 9.37, 10.96, 10.61, 9.65, 10.15, 12.48, 9.88, 10.63, 10.12, 8.03, 9.68, 10.96, 8.34, 9.89, 10.10, 9.92, 11.68, 12.14, 11.62, 10.88, 8.17, 10.22, 8.31, 11.31, 8.90, 8.76, 10.19, 9.22, 11.70, 10.80, 9.80, 8.11, 7.50, 11.19, 7.82, 12.68, 9.06, 10.91, 8.07, 10.91, 9.47,];
// Console.WriteLine(x.Length + "====" + y.Length);
Func<double[], double[], double> function = (x, param) =>
    {
        if (x.Length != 3 || param.Length != 4)
        {
            throw new Exception("invalid input");
        }
        return param[0] * Math.Sin(x[0]) + param[1] * Math.Cos(x[1]) + param[2] / x[2] + param[3];
    };
// [1, 2, 6, 10]
GeneticAlgorithm ga = new GeneticAlgorithm(
    X: x,
    Y: y,
    K: 4,
    minValue: 1,
    maxValue: 10,
    iteratorNum: 100,
    chromosomeNum: 1000,
    crossoverRate: 0.5,
    mutationRate: 0.05,
    function: function,
    encodeType: "Double",
    accuracy: 0.0001,
    geneticStrategy: "best",
    reserveRate: 0.1);

double[] res = ga.Run();
for (int i = 0; i < res.Length; i++)
{
    Console.WriteLine(res[i]);
}
// ga.Test();

// double[][] x
// double[] y2 = [1.9999999999999987, 1.9999999999999951, 1.9999999999999676, 1.9999999999999805, 2.000000000000005, 1.9999999999998705, 1.9999999999998903, 1.9999999999999216, 1.9999999999999647, 2.0000000000000195, 2.000000000000086, 1.9999999999994826, 1.999999999999516, 1.999999999999561, 1.9999999999996179, 1.9999999999996865, 1.9999999999997669, 1.999999999999859, 1.999999999999963, 2.0000000000000786, 2.000000000000206, 2.000000000000345, 2.000000000000496, 1.9999999999979303, 1.9999999999979912, 1.9999999999980638, 1.999999999998148, 1.999999999998244, 1.999999999998352, 1.9999999999984714, 1.999999999998603, 1.999999999998746, 1.9999999999951492, 1.9999999999990674, 1.999999999995267, 1.999999999999436, 1.9999999999954317, 1.9999999999998517, 1.9999999999956433, 2.0000000000003144, 1.9999999999959022, 2.000000000000824, 1.999999999996208, 2.0000000000013807, 1.9999999999965608, 2.0000000000019846, 1.9999999999969609, 1.9999999999917215, 1.9999999999974079, 1.9999999999919646, 1.999999999997902, 1.9999999999922549, 1.9999999999984428, 1.999999999992592, 1.999999999999031, 1.9999999999929763, 1.9999999999996663, 1.9999999999934075, 2.0000000000003486, 1.999999999993886, 2.000000000001078, 1.9999999999944114, 2.000000000001854, 1.9999999999949838, 1.9999999999878981, 1.9999999999805966, 1.9999999999883138, 1.9999999999962699, 2.0000000000044653, 1.9999999999810674, 1.9999999999892861, 1.9999999999977442, 2.000000000006441, 1.9999999999817262, 1.9999999999904468, 1.9999999999994067, 2.0000000000086056, 1.9999999999825733, 1.9999999999917957, 2.000000000001257, 1.9999999999741234, 1.9999999999836084, 1.9999999999933327, 2.000000000003296, 1.999999999974845, 1.999999999984832, 1.999999999995058, 2.000000000005523, 1.9999999999757547, 1.9999999999862434, 1.9999999999969713, 2.000000000007938, 1.9999999999768527, 1.9999999999878433, 1.9999999999990727, 1.9999999999668858, 1.9999999999781388, 1.9999999999896312, 2.0000000000013625, 1.9999999999678584,];
// Func<double[], double[], double> function2 = (x, param) =>
//     {
//         if (x.Length != 1 || param.Length != 1)
//         {
//             throw new Exception("invalid input!");
//         }
//         return x[0] * Math.Sin(param[0] * Math.PI * x[0]) + 2;
//     };

// GeneticAlgorithm ga = new GeneticAlgorithm(
//     X: x2,
//     Y: y2,
//     K: 1,
//     minValue: 5,
//     maxValue: 15,
//     iteratorNum: 10000,
//     chromosomeNum: 1000,
//     crossoverRate: 0.6,
//     mutationRate: 0.01,
//     function: function2,
//     encodeType: "Double");

// ga.Run();
// ga.Test();



// double[][] x = [[354.94,15.7, 27.18, 702000, 402408, 291509],
//                 [369, 21, 21, 931636, 221644, 620092],
//                 [368, 22, 22, 931736, 221744, 620192],
//                 [367, 23, 23, 931836, 221844, 620292],
//                 [366, 24, 24, 931936, 221944, 620392],
//                 [365, 25, 25, 932036, 222044, 620492],
//                 [366, 26, 26, 932136, 222144, 620592],
//                 [367, 27, 27, 932236, 222244, 620692],
//                 [368, 28, 28, 932336, 222344, 620792],
//                 [369, 29, 29, 932436, 222444, 620892],
// ];
// double[] y = [122, 173, 176, 179, 182, 185, 188, 191, 194, 197];
// // Console.WriteLine(x.Length + "====" + y.Length);
// Func<double[], double[], double> function = (x, param) =>
//     {
//         if (x.Length != 6 || param.Length != 1)
//         {
//             throw new Exception("invalid input");
//         }
//         return x[0] * x[1] + param[0] * x[2] / x[3] - x[4] + x[5];
//     };
// // [1, 2, 6, 10]
// GeneticAlgorithm ga = new GeneticAlgorithm(
//     X: x,
//     Y: y,
//     K: 1,
//     minValue: 0.2,
//     maxValue: 0.8,
//     iteratorNum: 100000,
//     chromosomeNum: 100,
//     crossoverRate: 0.5,
//     mutationRate: 0.01,
//     function: function,
//     encodeType: "Double");

// double[] res = ga.Run();
// for (int i = 0; i < res.Length; i++)
// {
//     Console.WriteLine(res[i]);
// }
